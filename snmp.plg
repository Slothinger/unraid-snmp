<?xml version='1.0' standalone='yes'?>

<!DOCTYPE PLUGIN [
<!ENTITY name        "snmp">
<!ENTITY author      "anon">

<!ENTITY version     "2018.07.22">
<!ENTITY pluginURL   "https://github.com/coppit/unraid-snmp/raw/master/snmp.plg">
<!ENTITY pkgversion  "5.8">
<!ENTITY gitURL      "https://raw.githubusercontent.com/&author;/unraid-snmp/master">
<!ENTITY plugdir     "/usr/local/emhttp/plugins/&name;">
<!ENTITY pkgdir      "/boot/packages">
<!ENTITY cfgdir      "/boot/config/plugins/&name;">
<!ENTITY pkghost     "https://mirrors.slackware.com/slackware/slackware64-current/slackware64/n/">

<!ENTITY snmppkg     "net-snmp-&pkgversion;-x86_64-5.txz">
<!ENTITY snmppkgmd5  "3ed1f1794ca434c3e3dcb56fa0eac51e">

<!ENTITY libnlpkg    "libnl-1.1.4-x86_64-1.txz">
<!ENTITY libnlpkgmd5 "435837a5bf0401a937d6ec93e458333b">

<!ENTITY iconfile    "snmp.png">
<!ENTITY iconfilemd5 "863e97dc0e59ae9352f558ee8e0d40a2">

<!ENTITY community   "public">
<!ENTITY location    "Here">
<!ENTITY contact     "root@tower">
]>

<PLUGIN  name="&name;"
         author="&author;"
         version="&pluginVer;"
         pluginURL="&pluginURL;"
         support="&supportURL;"
         min="&minOSVer;"
         >

<CHANGES>
**SNMP**

###2020.04.01
- Cache downloaded files on USB to support offline installation
- Add /mnt/disk up to 28 from 20 to provide 30 drive support
- Add MD5 for shell scripts
- Format plugin name in README to be in line with other plugins
- More consistent variable use and naming in .plg file
- Clearer install and uninstall logging

###2019.05.28c
- Fix icon file

###2019.05.28b
- Customized for the kubedzero repository

###2019.05.28
- Updated plugin to work with 6.7.0, enforce minimum version

###2018.07.22
- Fix bug with grep and "mostfree" allocator. https://github.com/coppit/unraid-snmp/pull/1

###2017.02.07
- Drop all pretense of trying to keep up with nerd tools. Just require perl, and suggest that the user install nerd tools.

###2016.02.28
- Bump the version of perl to match nerd tools.

###2015.10.18
- Run temperature updates in the background

###2015.09.06
- Move packages to github for better reliability

###2015.09.05
- Add support for reporting share free space

###2015.08.25
- Download and install the drive temp script (duh)

###2015.08.24
- Added hard drive temperature capture

###2015.08.23
- Reduced logging to "warning" level

###2015.06.24
- Initial unRAID V6 release.
</CHANGES>


<!-- Create plugin README.md file used in the Plugin Web UI-->
<FILE Name="&workingdir;/README.md">
<INLINE>
**SNMP**

Installs and configures SNMP, the Simple Network Management Protocol. SNMP can be used to expose server information to
monitoring tools like Observium.
</INLINE>
</FILE>

<!-- Check that Perl is installed -->
<FILE Run="/bin/bash">
<INLINE>
# https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
# exit script early if we encounter an error
set -e

perl_path=$(which perl 2>/dev/null)
if [ ! -x "$perl_path" ] ; then
  echo "This plugin requires perl. Installation is recommended via NerdPack:"
  echo "http://lime-technology.com/forum/index.php?topic=37541.0"
  echo ""
  echo "Exiting"
  echo ""
  echo ""
  exit 1
fi
</INLINE>
</FILE>

<!-- Download, cache and install dependent libnl package -->
<FILE Name="&usbcfgdir;/&libnlpkg;" Run="upgradepkg --install-new">
<URL>&pkghost;/&libnlpkg;</URL>
<MD5>&libnlpkgmd5;</MD5>
</FILE>

<!-- Download, cache and install the SNMP package -->
<FILE Name="&usbcfgdir;/&snmppkg;" Run="upgradepkg --install-new">
<URL>&pkghost;/&snmppkg;</URL>
<MD5>&snmppkgmd5;</MD5>
</FILE>

<!-- Download and cache the plugin icon -->
<FILE Name="&usbcfgdir;/&iconfile;">
<URL>&rawGitURL;/&iconfile;</URL>
<MD5>&iconfilemd5;</MD5>
</FILE>

<!-- Download and cache the drive temperature script -->
<FILE Name="&usbcfgdir;/&tempsfile;">
<URL>&rawGitURL;/&tempsfile;</URL>
<MD5>&tempsmd5;</MD5>
</FILE>

<!-- Download and cache the free space script -->
<FILE Name="&usbcfgdir;/&sharefile;">
<URL>&rawGitURL;/&sharefile;</URL>
<MD5>&sharemd5;</MD5>
</FILE>

<!-- Copy into working directory and set executable permissions -->
<FILE Run="/bin/bash">
<INLINE>
# https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
# exit script early if we encounter an error
set -e

echo ""
echo "+=============================================================================="
echo "| Copy files from &usbcfgdir;"
echo "| into &workingdir; and set permissions"
echo "+=============================================================================="

chmod o+rx &workingdir;

cp &usbcfgdir;/&iconfile; &workingdir;/&iconfile;
cp &usbcfgdir;/&tempsfile; &workingdir;/&tempsfile;
cp &usbcfgdir;/&sharefile; &workingdir;/&sharefile;

chmod a+x &workingdir;/&tempsfile;
chmod a+x &workingdir;/&sharefile;

echo "Copy complete!"
exit 0
</INLINE>
</FILE>

<!-- Create the config file in the working directory -->
<FILE Name="&workingdir;/snmpd.conf">
<INLINE>
rocommunity &community;
syslocation &location;
syscontact &contact;
disk /mnt/disk1
disk /mnt/disk2
disk /mnt/disk3
disk /mnt/disk4
disk /mnt/disk5
disk /mnt/disk6
disk /mnt/disk7
disk /mnt/disk8
disk /mnt/disk9
disk /mnt/disk10
disk /mnt/disk11
disk /mnt/disk12
disk /mnt/disk13
disk /mnt/disk14
disk /mnt/disk15
disk /mnt/disk16
disk /mnt/disk17
disk /mnt/disk18
disk /mnt/disk19
disk /mnt/disk20
disk /mnt/disk21
disk /mnt/disk22
disk /mnt/disk23
disk /mnt/disk24
disk /mnt/disk25
disk /mnt/disk26
disk /mnt/disk27
disk /mnt/disk28
disk /mnt/cache

extend disktemp &workingdir;/&tempsfile;
extend sharefree &workingdir;/&sharefile;
</INLINE>
</FILE>

<!-- Update rc.d to use our config file, restart snmpd, and test it -->
<FILE Run="/bin/bash">
<INLINE>
# https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
# exit script early if we encounter an error
set -e

echo ""
echo "+=============================================================================="
echo "| Updating /etc/rc.d/rc.snmpd to use our config file, and to reduce logging"
echo "+=============================================================================="

bash /etc/rc.d/rc.snmpd stop

sed -i.old -e 's#/etc/snmp/snmpd.conf#&workingdir;/snmpd.conf#g' /etc/rc.d/rc.snmpd
sed -i.old -e 's#OPTIONS="#OPTIONS="-LF w /var/log/snmpd.log #g' /etc/rc.d/rc.snmpd

bash /etc/rc.d/rc.snmpd start

echo ""
echo "+=============================================================================="
echo "| Testing SNMP by listing mounts, /boot should be present"
echo "+=============================================================================="

RESULTS=$(snmpwalk -v 1 localhost -c public hrFSMountPoint 2>&amp;1)
if [[ "$RESULTS" =~ "/boot" ]]
then
  echo "Looks like snmpd is working... Output:"
  echo "$RESULTS"
else
  echo "Couldn't find /boot mount point in SNMP output. Output:"
  echo "$RESULTS"
  echo ""
  echo ""
  exit 1
fi

echo ""
echo "Here are how drive temperatures look:"
echo snmpwalk -v 2c localhost -c public 'NET-SNMP-EXTEND-MIB::nsExtendOutLine."disktemp"'
snmpwalk -v 2c localhost -c public 'NET-SNMP-EXTEND-MIB::nsExtendOutLine."disktemp"'

echo ""
echo "Here is how share free space looks:"
echo snmpwalk -v 2c localhost -c public 'NET-SNMP-EXTEND-MIB::nsExtendOutLine."sharefree"'
snmpwalk -v 2c localhost -c public 'NET-SNMP-EXTEND-MIB::nsExtendOutLine."sharefree"'

echo ""
echo ""

exit 0
</INLINE>
</FILE>

<!-- The 'post-install' script -->
<FILE Run="/bin/bash">
<INLINE>
echo ""
echo "-----------------------------------------------------------"
echo " &name; has been installed."
echo " Version: &pluginVer;"
echo "-----------------------------------------------------------"
echo ""
</INLINE>
</FILE>

<!-- The 'remove' script -->
<FILE Run="/bin/bash" Method="remove">
<INLINE>
# https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
# exit script early if we encounter an error
set -e

echo ""
echo "+=============================================================================="
echo "| Uninstalling packages"
echo "+=============================================================================="

# Uninstall the package
removepkg $(basename &snmppkg; .txz) | grep -v -e '  --&gt; Deleting'

# Uninstall prerequisites in the reverse order of their installation
# NOTE: Skipping package removal of prereqs in case other plugins depend on them


echo ""
echo "+=============================================================================="
echo "| Deleting &workingdir;"
echo "| Deleting &usbcfgdir;"
echo "+=============================================================================="

# Delete the USB plugin folder storing cached files
rm -rf &usbcfgdir;

# Remove plugin.
rm -rf &workingdir;

echo ""
echo "-----------------------------------------------------------"
echo " &name; has been uninstalled."
echo "-----------------------------------------------------------"
echo ""

</INLINE>
</FILE>

</PLUGIN>
